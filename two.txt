Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:
Input: numRows = 1
Output: [[1]]
program:
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        l = [[1], [1, 1]]
        n=numRows
        if numRows==0:
            return []
        elif numRows==1:
            return [[1]]
        elif numRows==2:
            return l
        else:
            for i in range(n-2):
                d=[]
                ne = l[-1]
                d.append(1)
                for n in range(len(ne)-1):
                    d.append(ne[n] + ne[n+1])
                d.append(1)
                l.append(d)
        return l

----------------------------------
========================================
Q)Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

class Solution:
    def mySqrt(self, x: int) -> int:
        import math
        n=math.sqrt(x)
        m=math.floor(n)
        return m
---------------------------------------
============================
Given an integer n, return true if it is a power of three. Otherwise, return false.

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        if n>0 and 3**19%n==0:
            return True
        else:
             return False
